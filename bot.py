import asyncio
import logging
import os
import json
import psycopg2
import google.generativeai as genai

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, WebAppInfo,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.media_group import MediaGroupBuilder

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_APP_URL = os.getenv("ADMIN_APP_URL")
BOOKING_APP_URL = os.getenv("BOOKING_APP_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)


# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (PostgreSQL) ---
def init_db():
    conn = psycopg2.connect(DATABASE_URL); cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS sections (id SERIAL PRIMARY KEY, name VARCHAR(255) UNIQUE NOT NULL)')
    cursor.execute('CREATE TABLE IF NOT EXISTS photos (id SERIAL PRIMARY KEY, section_id INTEGER, file_id TEXT NOT NULL, FOREIGN KEY (section_id) REFERENCES sections (id) ON DELETE CASCADE)')
    conn.commit(); cursor.close(); conn.close()
def get_portfolio_data():
    conn = psycopg2.connect(DATABASE_URL); cursor = conn.cursor()
    cursor.execute("SELECT name FROM sections ORDER BY name"); sections = [row[0] for row in cursor.fetchall()]; portfolio = {name: [] for name in sections}
    cursor.execute("SELECT s.name, p.file_id FROM photos p JOIN sections s ON p.section_id = s.id"); photos_data = cursor.fetchall()
    cursor.close(); conn.close()
    for section_name, file_id in photos_data:
        if section_name in portfolio: portfolio[section_name].append(file_id)
    return portfolio
def add_section_db(section_name):
    try:
        conn = psycopg2.connect(DATABASE_URL); cursor = conn.cursor()
        cursor.execute("INSERT INTO sections (name) VALUES (%s)", (section_name,)); conn.commit(); cursor.close(); conn.close(); return True
    except psycopg2.IntegrityError: return False
def add_photo_db(section_name, photo_file_id):
    conn = psycopg2.connect(DATABASE_URL); cursor = conn.cursor()
    cursor.execute("SELECT id FROM sections WHERE name = %s", (section_name,)); section = cursor.fetchone()
    if section: cursor.execute("INSERT INTO photos (section_id, file_id) VALUES (%s, %s)", (section[0], photo_file_id)); conn.commit()
    cursor.close(); conn.close()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
main_app_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìù –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –ó–∞–ø–∏—Å—å", web_app=WebAppInfo(url=BOOKING_APP_URL))]],
    resize_keyboard=True
)
admin_main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", web_app=WebAppInfo(url=ADMIN_APP_URL))],
    [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")]
])
contact_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]], resize_keyboard=True, one_time_keyboard=True)
finish_upload_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_upload")]])
def generate_portfolio_sections_keyboard(data, for_admin=False):
    builder = [];
    for section_name in data.keys():
        builder.append([InlineKeyboardButton(text=section_name, callback_data=f"admin_section_{section_name}")])
    return InlineKeyboardMarkup(inline_keyboard=builder)

# --- FSM (–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô) ---
class Booking(StatesGroup): waiting_for_contact = State()
class PortfolioAdmin(StatesGroup): uploading_photos = State()

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø GEMINI ---
async def get_gemini_response(text: str) -> str:
    if not GEMINI_API_KEY:
        logging.warning("API –∫–ª—é—á –¥–ª—è Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ""
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        prompt = f"""
        –¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ú–∞—Ä–∏–Ω—ã –ó–∞—É–≥–æ–ª—å–Ω–∏–∫–æ–≤–æ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Telegram.
        –ö–õ–Æ–ß–ï–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
        - –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—ä—ë–º–∫–∏: –æ—Ç 5000 —Ä—É–±–ª–µ–π –≤ —á–∞—Å. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è - 5000—Ä/—á–∞—Å, Love Story - 6000—Ä/—á–∞—Å.
        - –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –ó–∞–ø–∏—Å—å" –≤ –º–µ–Ω—é.
        - –¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–ª–∏–µ–Ω—Ç—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏.
        –ü–†–ê–í–ò–õ–ê:
        - –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ –¥–µ–ª—É. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        - –ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —á—ë–º-—Ç–æ, —á–µ–≥–æ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞ –≤—ã —Å–Ω–∏–º–∞–µ—Ç–µ –ø–æ–¥ –≤–æ–¥–æ–π?"), –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ª—É—á—à–µ –∑–∞–¥–∞—Ç—å –ú–∞—Ä–∏–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –∏ –æ–Ω–∞ —Å–∫–æ—Ä–æ —Å–∞–º–∞ –æ—Ç–≤–µ—Ç–∏—Ç.
        - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.
        –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: "{text}"
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç:
        """
        response = await model.generate_content_async(prompt)
        return response.text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        return ""

# --- –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –ú–∞—Ä–∏–Ω—ã –ó–∞—É–≥–æ–ª—å–Ω–∏–∫–æ–≤–æ–π.", reply_markup=main_app_keyboard)

@dp.message(Command('admin'))
async def admin_panel(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_keyboard)

@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message, state: FSMContext):
    data = json.loads(message.web_app_data.data)
    source = data.get('source')

    if source == 'admin_panel':
        if message.from_user.id != ADMIN_ID: return
        action, name = data.get('action'), data.get('name')
        if action == 'add_section' and name and add_section_db(name):
            await message.answer(f"‚úÖ –†–∞–∑–¥–µ–ª ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω!")
        else:
            await message.answer(f"‚ö†Ô∏è –†–∞–∑–¥–µ–ª ¬´{name}¬ª —É–∂–µ –µ—Å—Ç—å.")
    
    elif source == 'booking_form':
        await state.update_data(
            plan=data.get('plan'), hours=data.get('hours'),
            location=data.get('location'), comments=data.get('comments')
        )
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Å–≤—è–∑–∏.", reply_markup=contact_keyboard)
        await state.set_state(Booking.waiting_for_contact)
        
    elif source == 'show_portfolio':
        section_name = data.get('section')
        portfolio = get_portfolio_data()
        photos = portfolio.get(section_name, [])
        if not photos:
            await message.answer(f"–í —Ä–∞–∑–¥–µ–ª–µ ¬´{section_name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return
        await message.answer(f"–†–∞–±–æ—Ç—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ¬´{section_name}¬ª:")
        media_group = MediaGroupBuilder()
        for photo_id in photos:
            media_group.add_photo(media=photo_id)
        if media_group.build():
            await bot.send_media_group(message.chat.id, media=media_group.build()[:10])

@dp.message(Booking.waiting_for_contact, F.contact)
async def contact_received(message: Message, state: FSMContext):
    user_data = await state.get_data()
    info = (f"üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! üéâ\n\nüë§ **–ö–ª–∏–µ–Ω—Ç:** {message.from_user.first_name}\nüìû **–¢–µ–ª–µ—Ñ–æ–Ω:** `{message.contact.phone_number}`\n\n"
            f"üìù **–î–µ—Ç–∞–ª–∏:**\n- **–ü–ª–∞–Ω:** {user_data.get('plan')}\n- **–ß–∞—Å—ã:** {user_data.get('hours')}\n"
            f"- **–õ–æ–∫–∞—Ü–∏—è:** {user_data.get('location')}\n- **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {user_data.get('comments') or '–ù–µ—Ç'}")
    await bot.send_message(ADMIN_ID, info, parse_mode="Markdown")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–∞—Ä–∏–Ω–∞ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=main_app_keyboard)
    await state.clear()

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û (–î–õ–Ø –ê–î–ú–ò–ù–ê) ---
@dp.callback_query(F.data == "add_photo")
async def add_photo_start(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id != ADMIN_ID: return
    if not get_portfolio_data(): await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª."); await cb.answer(); return
    await cb.message.answer("–ö—É–¥–∞ –≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ?", reply_markup=generate_portfolio_sections_keyboard(get_portfolio_data(), for_admin=True)); await state.set_state(PortfolioAdmin.uploading_photos); await cb.answer()
@dp.cal
